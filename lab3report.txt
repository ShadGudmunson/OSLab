Lab3: Priority Scheduling for xv6
Report
Shadron Gudmunson and Casey Haynes

Task 1.
*****************************************************
$ ps
name 	 pid 	 state 	 priority
init 	 1 	 SLEEPING 	 10
sh 	 2 	 SLEEPING 	 10
ps 	 3 	 RUNNING 	 10
$ 

Task 2.
*****************************************************
$ lab3test 4 &
$ Parent 5 creating child 6
Child 6 created
ps
name 	 pid 	 state 	 priority
init 	 1 	 SLEEPING 	 10
sh 	 2 	 SLEEPING 	 10
lab3test 	 6 	 RUNNING 	 20
lab3test 	 5 	 SLEEPING 	 10
ps 	 7 	 RUNNING 	 10
$ nice 5 18
$ ps
name 	 pid 	 state 	 priority
init 	 1 	 SLEEPING 	 10
sh 	 2 	 SLEEPING 	 10
lab3test 	 6 	 RUNNABLE 	 20
lab3test 	 5 	 SLEEPING 	 18
ps 	 9 	 RUNNING 	 10
$ 

Task 3. 
*******************************************************
lab3test &; lab3test &; lab3test &
PCarent 8Parent 5 creating child 7
Child 7 created
h$ Pare creating child 9
ild 9 created
Child nt 10 creating c1hild 11
1 created

ps
name 	 pid 	 state 	 priority
init 	 1 	 SLEEPING 	 10
sh 	 2 	 SLEEPING 	 10
lab3test 	 11 	 RUNNABLE 	 20
lab3test 	 10 	 SLEEPING 	 10
lab3test 	 5 	 SLEEPING 	 10
lab3test 	 7 	 RUNNABLE 	 20
lab3test 	 8 	 SLEEPING 	 10
lab3test 	 9 	 RUNNING 	 20
ps 	 12 	 RUNNING 	 10

ps 	 13 	 RUNNING 	 10
$ ps
name 	 pid 	 state 	 priority
init 	 1 	 SLEEPING 	 10
sh 	 2 	 SLEEPING 	 10
lab3test 	 11 	 RUNNABLE 	 20
lab3test 	 10 	 SLEEPING 	 10
lab3test 	 5 	 SLEEPING 	 10
lab3test 	 7 	 RUNNING 	 20
lab3test 	 8 	 SLEEPING 	 10
lab3test 	 9 	 RUNNABLE 	 20
ps 	 14 	 RUNNING 	 10

$ ps
name 	 pid 	 state 	 priority
init 	 1 	 SLEEPING 	 10
sh 	 2 	 SLEEPING 	 10
lab3test 	 11 	 RUNNABLE 	 20
lab3test 	 10 	 SLEEPING 	 10
lab3test 	 5 	 SLEEPING 	 10
lab3test 	 7 	 RUNNABLE 	 20
lab3test 	 8 	 SLEEPING 	 10
lab3test 	 9 	 RUNNING 	 20

$ ps
name 	 pid 	 state 	 priority
init 	 1 	 SLEEPING 	 10
sh 	 2 	 SLEEPING 	 10
lab3test 	 11 	 RUNNING 	 20
lab3test 	 10 	 SLEEPING 	 10
lab3test 	 5 	 SLEEPING 	 10
lab3test 	 7 	 RUNNABLE 	 20
lab3test 	 8 	 SLEEPING 	 10
lab3test 	 9 	 RUNNABLE 	 20

$ ps
name 	 pid 	 state 	 priority
init 	 1 	 SLEEPING 	 10
sh 	 2 	 SLEEPING 	 10
lab3test 	 11 	 RUNNABLE 	 20
lab3test 	 10 	 SLEEPING 	 10
lab3test 	 5 	 SLEEPING 	 10
lab3test 	 7 	 RUNNABLE 	 20
lab3test 	 8 	 SLEEPING 	 10
lab3test 	 9 	 RUNNING 	 20

$ ps
name 	 pid 	 state 	 priority
init 	 1 	 SLEEPING 	 10
sh 	 2 	 SLEEPING 	 10
lab3test 	 11 	 RUNNING 	 20
lab3test 	 10 	 SLEEPING 	 10
lab3test 	 5 	 SLEEPING 	 10
lab3test 	 7 	 RUNNABLE 	 20
lab3test 	 8 	 SLEEPING 	 10
lab3test 	 9 	 RUNNABLE 	 20

EXPLANATION: As can be seen from the ps commands above,
the three child processes are all either in RUNNABLE
or RUNNING states. One processes runs at a time for a fixed
"time quantum," and each process in the RUNNABLE state gets
CPU time while alternating through. This is the nature of the 
Round Robin scheduling algorithm. 

Task 5.
****************************************************

init: starting sh
$ lab3test &; lab3test &; lab3test &
Parent 5 creating child 9
$ Parent 7 creating child 10
Child 9 created
PChild 10 created
arent 8 creating child 11
Child 11 created
ps
name 	 pid 	 state 	 priority
init 	 1 	 SLEEPING 	 10
sh 	 2 	 SLEEPING 	 10
lab3test 	 9 	 RUNNABLE 	 20
lab3test 	 8 	 SLEEPING 	 10
lab3test 	 5 	 SLEEPING 	 10
lab3test 	 7 	 SLEEPING 	 10
lab3test 	 10 	 RUNNING 	 20
lab3test 	 11 	 RUNNABLE 	 20
ps 	 12 	 RUNNING 	 10
$ ps
name 	 pid 	 state 	 priority
init 	 1 	 SLEEPING 	 10
sh 	 2 	 SLEEPING 	 10
lab3test 	 9 	 RUNNABLE 	 20
lab3test 	 8 	 SLEEPING 	 10
lab3test 	 5 	 SLEEPING 	 10
lab3test 	 7 	 SLEEPING 	 10
lab3test 	 10 	 RUNNABLE 	 20
lab3test 	 11 	 RUNNING 	 20
ps 	 14 	 RUNNING 	 10
$ set_priority 11 5
$ ps
name 	 pid 	 state 	 priority
init 	 1 	 SLEEPING 	 10
sh 	 2 	 SLEEPING 	 10
lab3test 	 9 	 RUNNABLE 	 20
lab3test 	 8 	 SLEEPING 	 10
lab3test 	 5 	 SLEEPING 	 10
lab3test 	 7 	 SLEEPING 	 10
lab3test 	 10 	 RUNNABLE 	 20
lab3test 	 11 	 RUNNING 	 5
ps 	 14 	 RUNNING 	 10
$ ps
name 	 pid 	 state 	 priority
init 	 1 	 SLEEPING 	 10
sh 	 2 	 SLEEPING 	 10
lab3test 	 9 	 RUNNABLE 	 20
lab3test 	 8 	 SLEEPING 	 10
lab3test 	 5 	 SLEEPING 	 10
lab3test 	 7 	 SLEEPING 	 10
lab3test 	 10 	 RUNNABLE 	 20
lab3test 	 11 	 RUNNING 	 5
ps 	 15 	 RUNNING 	 10
$ ps
name 	 pid 	 state 	 priority
init 	 1 	 SLEEPING 	 10
sh 	 2 	 SLEEPING 	 10
lab3test 	 9 	 RUNNABLE 	 20
lab3test 	 8 	 SLEEPING 	 10
lab3test 	 5 	 SLEEPING 	 10
lab3test 	 7 	 SLEEPING 	 10
lab3test 	 10 	 RUNNABLE 	 20
lab3test 	 11 	 RUNNING 	 5
ps 	 16 	 RUNNING 	 10
$ ps
name 	 pid 	 state 	 priority
init 	 1 	 SLEEPING 	 10
sh 	 2 	 SLEEPING 	 10
lab3test 	 9 	 RUNNABLE 	 20
lab3test 	 8 	 SLEEPING 	 10
lab3test 	 5 	 SLEEPING 	 10
lab3test 	 7 	 SLEEPING 	 10
lab3test 	 10 	 RUNNABLE 	 20
lab3test 	 11 	 RUNNING 	 5
ps 	 17 	 RUNNING 	 10

EXPLANATION: As mentioned before the three child 
processes all start in either the RUNNING or RUNNABLE
state. Because all of the child processes start with
the same priority this still functions much like the
round robin scheduling algorithm. However when the
3rd child (with pid 12) has its NICE value changed to
5 the algorithm differs from the RR algorithm, only 
running the process with the highest priority.	